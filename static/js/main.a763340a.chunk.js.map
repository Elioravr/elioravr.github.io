{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","scrollTop","componentDidMount","window","addEventListener","handleScroll","componentWillUnmount","removeEventListener","event","srcElement","documentElement","setState","fullname","data","jobTitle","sections","smallSections","summary","this","visibilityPercents","profilePictureStyle","transform","shouldShowProfilePicture","className","style","opacity","height","Object","keys","map","sectionKey","title","stages","startTime","endTime","stageJobTitle","subTitle","descriptionParts","description","split","length","text","stage","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i3HA8GeA,G,iNAxGbC,MAAQ,CACNC,UAAW,G,EAGbC,kBAAoB,WAClBC,OAAOC,iBAAiB,SAAU,EAAKC,e,EAGzCC,qBAAuB,WACrBH,OAAOI,oBAAoB,SAAU,EAAKF,e,EAG5CA,aAAe,SAACG,GACd,IAAIP,EAAYO,EAAMC,WAAWC,gBAAgBT,UAEjD,EAAKU,SAAS,CAACV,e,wEAGP,IACDW,EAAwDC,EAAxDD,SAAUE,EAA8CD,EAA9CC,SAAUC,EAAoCF,EAApCE,SAAUC,EAA0BH,EAA1BG,cAAeC,EAAWJ,EAAXI,QAC7ChB,EAAaiB,KAAKlB,MAAlBC,UAEHkB,GAAsB,IAAMlB,GAAa,IAEzCkB,EAAqB,IACvBA,EAAqB,GAGvB,IAEMC,EAAsB,CAACC,UAAU,SAAD,OAAWF,EAAX,MAChCG,EAA2BrB,EAAY,IAE7C,OACE,yBAAKsB,UAAU,OACb,yBAAKA,UAAS,kCAA6BD,GAA4B,UACpEA,GAA4B,yBAAKC,UAAU,kBAAkBC,MAAOJ,IACrE,yBAAKG,UAAU,kBACb,8BAAOX,IAET,yBAAKW,UAAU,uBACb,8BAAOT,IAGT,yBAAKS,UAAU,UAAUC,MAAO,CAACC,QAASN,EAAoBO,OAAQ,IAAMP,IACzEF,IAIL,yBAAKM,UAAS,8BAAyBD,GAA4B,oBAChEK,OAAOC,KAAKb,GAAUc,KAAI,SAACC,GAAgB,IAAD,EACjBf,EAASe,GAA1BC,EADkC,EAClCA,MAAOC,EAD2B,EAC3BA,OAEd,OACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,SAASQ,GAExB,yBAAKR,UAAU,oBACZS,EAAOH,KAAI,YAA2E,IAAzEI,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,QAAmBC,EAA0C,EAApDrB,SAAyBsB,EAA2B,EAA3BA,SACnDC,EAD8E,EAAjBC,YAC9BC,MAAM,MAE3C,OACE,yBAAKhB,UAAU,SACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,YAAYW,GAC3B,yBAAKX,UAAU,cAAcU,IAE/B,yBAAKV,UAAU,WACb,yBAAKA,UAAU,aAAaY,GAC5B,yBAAKZ,UAAU,aAAaa,GAC5B,wBAAIb,UAAS,sBAAiBc,EAAiBG,OAAS,GAAK,SAAWH,EAAiBR,KAAI,SAAAY,GAAI,OAAI,4BAAKA,iBAUzHd,OAAOC,KAAKZ,GAAea,KAAI,SAAAC,GAAe,IAAD,EACpBd,EAAcc,GAA/BC,EADqC,EACrCA,MAAOC,EAD8B,EAC9BA,OAEd,OACE,yBAAKT,UAAU,iBACb,yBAAKA,UAAU,SAASQ,GACxB,wBAAIR,UAAU,oBACXS,EAAOH,KAAI,SAAAa,GAAK,OACf,wBAAInB,UAAU,SACZ,yBAAKA,UAAU,eAAemB,EAAMX,OACpC,yBAAKR,UAAU,eAAemB,EAAMJ,4B,GA5FxCK,cCOEC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a763340a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport data from './data.json'\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    scrollTop: 0\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = (event) => {\n    let scrollTop = event.srcElement.documentElement.scrollTop\n\n    this.setState({scrollTop})\n  }\n\n  render() {\n    const {fullname, jobTitle, sections, smallSections, summary} = data\n    const {scrollTop} = this.state\n\n    let visibilityPercents = (150 - scrollTop) / 150\n\n    if (visibilityPercents < 0) {\n      visibilityPercents = 0\n    }\n\n    const profilePictureSize = 120 * visibilityPercents\n\n    const profilePictureStyle = {transform: `scale(${visibilityPercents})`}\n    const shouldShowProfilePicture = scrollTop < 150\n\n    return (\n      <div className=\"App\">\n        <div className={`main-details-container ${!shouldShowProfilePicture && 'fixed'}`}>\n          {shouldShowProfilePicture && <div className=\"profile-picture\" style={profilePictureStyle}></div>}\n          <div className=\"name-container\">\n            <span>{fullname}</span>\n          </div>\n          <div className=\"job-title-container\">\n            <span>{jobTitle}</span>\n          </div>\n\n          <div className=\"summary\" style={{opacity: visibilityPercents, height: 150 * visibilityPercents}}>\n            {summary}\n          </div>\n        </div>\n\n        <div className={`sections-container ${!shouldShowProfilePicture && 'with-margin-top'}`}>\n          {Object.keys(sections).map((sectionKey) => {\n            const {title, stages} = sections[sectionKey]\n\n            return (\n              <div className=\"section\">\n                <div className=\"title\">{title}</div>\n\n                <div className=\"stages-container\">\n                  {stages.map(({startTime, endTime, jobTitle: stageJobTitle, subTitle, description}) => {\n                    const descriptionParts = description.split('\\n')\n\n                    return (\n                      <div className=\"stage\">\n                        <div className=\"point-in-time\"></div>\n                        <div className=\"time-container\">\n                          <div className=\"end-time\">{endTime}</div>\n                          <div className=\"start-time\">{startTime}</div>\n                        </div>\n                        <div className=\"details\">\n                          <div className=\"job-title\">{stageJobTitle}</div>\n                          <div className=\"sub-title\">{subTitle}</div>\n                          <ul className={`description ${descriptionParts.length > 1 && \"list\"}`}>{descriptionParts.map(text => <li>{text}</li>)}</ul>\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            )\n          })}\n\n          {Object.keys(smallSections).map(sectionKey => {\n            const {title, stages} = smallSections[sectionKey]\n\n            return (\n              <div className=\"small-section\">\n                <div className=\"title\">{title}</div>\n                <ul className=\"stages-container\">\n                  {stages.map(stage => (\n                    <li className=\"stage\">\n                      <div className=\"stage-title\">{stage.title}</div>\n                      <div className=\"description\">{stage.description}</div>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}